package com.ms.kk.widget;import android.content.Context;import android.graphics.Canvas;import android.graphics.Color;import android.graphics.Paint;import android.graphics.RectF;import android.text.TextPaint;import android.util.AttributeSet;import android.view.MotionEvent;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.recyclerview.widget.RecyclerView;import androidx.recyclerview.widget.SimpleItemAnimator;public class ZyRecycleView extends RecyclerView {    private TextPaint textPaint;    private float downY;    private boolean isDo;    private boolean isLoading;    private OnLoadMoreListener onLoadMoreListener;    private String load_text = "加载中...";    public ZyRecycleView(@NonNull Context context) {        this(context, null);    }    public ZyRecycleView(@NonNull Context context, @Nullable AttributeSet attrs) {        super(context, attrs);        addOnScrollListener(onScrollListener);        ((SimpleItemAnimator) getItemAnimator()).setSupportsChangeAnimations(false);        textPaint = new TextPaint();        textPaint.setTextSize(32);        textPaint.setAntiAlias(true);        textPaint.setColor(Color.WHITE);    }    public void setOnLoadMoreListener(OnLoadMoreListener onLoadMoreListener) {        this.onLoadMoreListener = onLoadMoreListener;    }    OnScrollListener onScrollListener = new OnScrollListener() {        @Override        public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {            super.onScrolled(recyclerView, dx, dy);            if (isDo && !canScrollVertically(1) && dy > 0 && onLoadMoreListener != null && !isLoading) {                isDo = false;                isLoading = true;                invalidate();                onLoadMoreListener.onLoadMore();            }        }    };    public void finishLoading() {        isLoading = false;        invalidate();    }    @Override    public boolean dispatchTouchEvent(MotionEvent ev) {        switch (ev.getAction()) {            case MotionEvent.ACTION_DOWN:                isDo = true;                downY = ev.getRawY();                break;            case MotionEvent.ACTION_UP:                if (isDo && !canScrollVertically(1) && ev.getRawY() - downY < -100 && onLoadMoreListener != null && !isLoading) {                    isDo = false;                    isLoading = true;                    invalidate();                    onLoadMoreListener.onLoadMore();                }                break;        }        return super.dispatchTouchEvent(ev);    }    private float getTextHeight() {        return textPaint.getFontMetrics().bottom - textPaint.getFontMetrics().top;    }    @Override    public void onDrawForeground(Canvas canvas) {        super.onDrawForeground(canvas);        if (isLoading) {            float tW = textPaint.measureText(load_text);            Paint paint = new Paint();            paint.setColor(Color.parseColor("#80777777"));            paint.setAntiAlias(true);            canvas.drawRect(new RectF(0, getHeight() - getTextHeight(), getWidth(), getHeight()), paint);            canvas.drawText(load_text, getWidth() / 2 - tW / 2, getHeight() - textPaint.getFontMetrics().bottom, textPaint);        }    }    public static interface OnLoadMoreListener {        void onLoadMore();    }}